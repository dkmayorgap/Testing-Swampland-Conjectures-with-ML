function [Y,Xf,Af] = net_random(X,~,~)
%NET_RANDOM neural network simulation function.
%
% Auto-generated by MATLAB, 09-Oct-2019 15:45:36.
% 
% [Y] = net_random(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 10xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-10;-10;-10;-10;-10;-10;-10;-10;-10;-10];
x1_step1.gain = [0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.049757327595576939;-2.3663720948370143837;-0.034719923372838461251;0.72622865693504623508;3.7720562121356944196;0.30096724072614083889;0.036571563039181576027;-0.22495975279851221362;0.40531071416685071629;1.6724924866949562041;-3.1103867729863607927;-1.0937078889694764605];
IW1_1 = [-0.07814437348695901786 0.069716902908320541044 -0.11733318243334873998 -0.033718501242498588599 1.1366332083334587111 -0.35506052954685679568 1.1684217401200631681 0.020197874199539247314 0.72894327433893524315 0.012151897891552463846;-0.47562982857955149463 -0.0017625230873094205417 -0.1597419049045863404 -0.5603047264696556784 -4.5159542476771106223 -1.3419788666454794956 0.82681447557734755183 -1.8957728820492609767 -1.1157890630867917103 -0.5667230973704525665;4.7636491220262024981 0.04605524917920641309 0.30704599972003676633 0.0087470774678141474667 1.153990861937868484 -0.75790542633159596608 -0.37684509344585004342 0.8255175582769748166 -12.811765170483335297 0.33437831349016122751;-0.91889744164555497985 1.1877967204965658166 0.62129153555155203215 0.10282031320717816003 6.0199161322273901931 4.9764100772367765302 3.9387648963248391709 -2.165896672219706609 -5.6144195468782891467 0.79308275364418190367;-1.8200129988840649808 -1.2714868849040850129 1.0258625697361871687 -0.76644344586692947363 -1.7593190725145231301 4.8823124225425411638 -5.1929174007928740053 -2.0102659310972978979 -3.8754532497349436504 -0.48851458059128516354;0.2012815275967913542 0.33370636353442240107 0.10240875263741433532 -0.11322709243203772644 -0.83027639700590316618 0.052203404127223476672 -0.32629628193666998515 0.71427976640739154757 -0.74306598845182014745 -0.24082423873910419054;-4.7541427173642185622 -0.083512421175957432529 -0.30458261210227932647 -0.009086043567767099205 -1.1594551134503150447 0.74733349971113627319 0.38913224831608933529 -0.82330372231104409497 12.82681540189018321 -0.33558896690925799078;-2.6500358564599668654 6.5088119264496109295 -0.24945837218554753334 -0.08356262474798273332 0.67759816371426351278 2.1385546926540768276 -1.4101590467273130702 -0.74212458412700343935 -9.1368073244302969727 -0.32574450554447870188;-0.32880666304028394187 -0.5460381657960358126 -0.28369401753254924747 -0.27256861732932791131 2.7110902667072838135 1.8125359649224499492 4.4945863196825017738 -0.11018840410156655052 1.6709311923700234104 0.04031366914312309313;2.413981882614967045 3.7918576977431488473 2.9211271620835708163 0.64335442748035676086 -3.4274498295418087679 -2.8267032220244199259 3.2714351816697053721 3.5151072107313958703 1.8878526353920084269 -2.8696271174834917517;0.22645373252306566503 -1.0387572134965779025 0.28667361935279833673 -0.11236922264223914159 -0.90442881119228368814 -5.0137600671994420054 -5.3408256096924180412 0.27743342936572029656 6.3946923450736781191 -0.78453249944403302685;0.079261479506994109157 -0.075086295224831359207 0.1220391829439711473 0.03512767334880651654 -1.1630556743610187542 0.3732487038123501466 -1.1993623309200169835 -0.02862475662374182328 -0.74881041229291145367 -0.012000808516894403977];

% Layer 2
b2 = 0.37495167879542518063;
LW2_1 = [0.51997486847716478664 0.003230150280691066085 -0.73482243133279045999 0.0022098400623532235207 0.0019744400062343949939 0.0074354303587991282462 -0.73508604880816641458 -0.0028304345362258212862 -0.0054496250378802549644 -0.0011583738801390123206 0.0022482256545031066228 0.50509354315096954835];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00252655487786065;
y1_step1.xoffset = -544.685316991654;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
